{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Parth Sawant\\\\OneDrive\\\\Desktop\\\\Ambulance\\\\Ambulance-tracker\\\\Web\\\\clients\\\\hospital-display\\\\src\\\\components\\\\Coord.js\";\nimport React from 'react';\nimport { hospitalLatitude, hospitalLongitude } from '../config/HospitalCoords';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\nconst Coord = ({\n  data\n}) => {\n  const getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\n    if (lat2 === null || lon2 === null) {\n      return -1;\n    }\n    var R = 6371; // Radius of the earth in km\n    var dLat = deg2rad(lat2 - lat1); // deg2rad below\n    var dLon = deg2rad(lon2 - lon1);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    return d;\n  };\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n  let tlat = hospitalLatitude,\n    tlng = hospitalLongitude;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(getDistanceFromLatLonInKm(tlat, tlng, data.lat, data.lng) > 3 ? 'border-green-800' : 'border-red-900', 'border-l-4 p-4 m-2 bg-gray-200'),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold\",\n        children: [\"Ambulance Number : \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-normal\",\n          children: [\" \", data.ambNumber, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 58\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold\",\n        children: [\"Name : \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-normal\",\n          children: [\" \", data.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold\",\n        children: [\"Description : \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-normal\",\n          children: [\" \", data.desc, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), data.loaded ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold\",\n        children: [\"Distance : \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-normal\",\n          children: [Math.round(getDistanceFromLatLonInKm(tlat, tlng, data.lat, data.lng) * 100) / 100, \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 66\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Location not loaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 198\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Coord;\nexport default Coord;\nvar _c;\n$RefreshReg$(_c, \"Coord\");","map":{"version":3,"names":["React","hospitalLatitude","hospitalLongitude","jsxDEV","_jsxDEV","Fragment","_Fragment","classNames","classes","filter","Boolean","join","Coord","data","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI","tlat","tlng","children","className","lat","lng","ambNumber","fileName","_jsxFileName","lineNumber","columnNumber","name","desc","loaded","round","_c","$RefreshReg$"],"sources":["C:/Users/Parth Sawant/OneDrive/Desktop/Ambulance/Ambulance-tracker/Web/clients/hospital-display/src/components/Coord.js"],"sourcesContent":["import React from 'react'\r\nimport { hospitalLatitude, hospitalLongitude } from '../config/HospitalCoords';\r\n\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(' ')\r\n}\r\n\r\nconst Coord = ({ data }) => {\r\n  const getDistanceFromLatLonInKm = (lat1,lon1,lat2,lon2) => {\r\n    if(lat2 === null || lon2 === null){\r\n      return -1;\r\n    }\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2-lon1); \r\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n    var d = R * c;   \r\n    return d;\r\n  }\r\n\r\n  const deg2rad = (deg) => {\r\n    return deg * (Math.PI/180);\r\n  }\r\n\r\n  \r\n  let tlat = hospitalLatitude, tlng = hospitalLongitude;\r\n\r\n  return (\r\n    <>\r\n      <div className={classNames(getDistanceFromLatLonInKm(tlat, tlng, data.lat, data.lng) > 3? 'border-green-800': 'border-red-900', 'border-l-4 p-4 m-2 bg-gray-200' )}>\r\n        <h3 className='font-semibold'>Ambulance Number : <span className='font-normal'> { data.ambNumber } </span></h3>\r\n        <h4 className='font-semibold'>Name : <span className='font-normal'> { data.name } </span></h4>\r\n        <h4 className='font-semibold'>Description : <span className='font-normal'> { data.desc } </span></h4>\r\n        {\r\n          data.loaded ? <h4 className='font-semibold'>Distance : <span className='font-normal'>{Math.round(getDistanceFromLatLonInKm(tlat, tlng, data.lat, data.lng) * 100) / 100} km</span> </h4> : <p>Location not loaded</p>\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Coord;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}